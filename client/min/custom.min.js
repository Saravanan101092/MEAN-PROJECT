/**
 * app config file
 */

var myApp = angular.module("myApp", ["ngRoute","ngCookies","firebase"]);

myApp.run(['$rootScope', '$location','$timeout', function($rootScope, $location,$timeout) {
    $rootScope.$on('$routeChangeError', function(event, next, previous, error) {
        if (error == 'AUTH_REQUIRED') {
            $rootScope.message = 'Sorry, you must log in to access that page';
            $location.path('/login');
        }//Auth Required
    }); //$routeChangeError
   
    $rootScope.hideMsg = function(){
        $rootScope.message = "";
        $rootScope.msgClass = "";
    }
    $rootScope.showMsgBriefly = function(msg,msgClas){
        $rootScope.message = msg;
        $rootScope.msgClass = msgClas;
        $timeout(function(){$rootScope.hideMsg();},5000);
    }

   
}]);

myApp.config(['$qProvider', function ($qProvider) {
    $qProvider.errorOnUnhandledRejections(false);
}]);
myApp.config(function ($routeProvider, $locationProvider) {
    $routeProvider
        .when("/browseDebates", {
            templateUrl: "view/browseDebates.html",
            controller: "BrowseDebatesController",
            //resolve: {
              //  currentAuth: function(Authentication) {
               //     return Authentication.requireAuth();
             //   } //currentAuth
           // }//resolve
        })
        .when("/createDebate", {
            templateUrl: "view/createDebate.html",
            controller: "MainController",
            resolve: {
                currentAuth: function(Authentication) {
                    return Authentication.requireAuth();
                } //currentAuth
            }//resolve
        })
        .when("/login", {
            templateUrl: "view/login.html",
            controller: "LoginController"
        })
        .when("/registration", {
            templateUrl: "view/register.html",
            controller: "LoginController"
        })
        .when("/debate/:debateId", {
            templateUrl: "view/debate.html",
           // controller: "DebateController"
        })
        .otherwise({redirectTo: '/browseDebates'});
});
myApp.controller('BrowseDebatesController',['$scope','$rootScope','$http','$location','$cookies',function($scope,$rootScope,$http,$location,$cookies){
	$scope.allDebates=[];
	$http.get('/saru/debates').then(function(response){
		$scope.allDebates = response.data;
	});
}]);
myApp.controller('DebateController',['$http','$scope', '$rootScope','$location','$routeParams',function($http,$scope,$rootScope,$location,$routeParams){
	console.log("inside debate controller");
	var socket = io.connect('/');
	console.log("socketID"+JSON.stringify(socket.id));
	socket.on('change', function(obj) {
		console.log("hellow message from server"+JSON.stringify(obj));
	});

	var checkSupported = function(argument){
		var email = $rootScope.currentUser.email;
		var flag = false;
		if(argument) {
			angular.forEach(argument.content.supports, function (value, key) {
				if (JSON.stringify(email) === JSON.stringify(value.s_email)) {
					flag = true;
				}
			});
		}
		return flag;
	}

	$scope.getSupported = function(argument){
			if($rootScope.currentUser){
		if(checkSupported(argument)){
			return 'green';
		}}
	}
	var checkDisputed = function(argument){
		var email = $rootScope.currentUser.email;
		var flag = false;
		if(argument) {
			angular.forEach(argument.content.disputes, function (value, key) {
				if (JSON.stringify(email) === JSON.stringify(value.s_email)) {
					flag = true;
				}
			});
		}
		console.log('checkdisputed flag'+flag);
		return flag;
	}

	$scope.getDisputed = function(argument){
		if($rootScope.currentUser){
		if(checkDisputed(argument)){
			return 'red';
		}
	}
	}

	var addDebateConn = function() {
		console.log('listening to debate room'+$scope.currentDebate._id)
		socket.on($scope.currentDebate._id, function (argument) {
			//console.log('debate specific message'+JSON.stringify(argument));
			if (argument.content.proInd === 'Y') {
				if ($scope.currentPArgs == 'undefined') {
					$scope.currentPArgs = [];
				}
				$scope.currentPArgs.push(argument);
			} else {
				if ($scope.currentNArgs === 'undefined') {
					$scope.currentNArgs = [];
				}
				$scope.currentNArgs.push(argument);
			}
			$scope.$apply();
		});
	}

	$http.get('/saru/debates/'+$routeParams.debateId).then(function(response){
		//console.log("response for debateid:"+JSON.stringify(response));
		$scope.currentDebate = response.data;
		console.log('listening to debate room'+$scope.currentDebate._id);
		addDebateConn();
		socket.on($scope.currentDebate._id, function (argument) {
			console.log('debate specific message'+JSON.stringify(argument));
			if (argument.content.proInd === 'Y') {
				if ($scope.currentPArgs == 'undefined') {
					$scope.currentPArgs = [];
				}
				$scope.currentPArgs.push(argument);
			} else {
				if ($scope.currentNArgs === 'undefined') {
					$scope.currentNArgs = [];
				}
				$scope.currentNArgs.push(argument);
			}
			$scope.$apply();
		});

	});
	
	$http.get('/saru/debate/'+$routeParams.debateId+'/arguments/N').then(function(response){
		//console.log("response for debateid and proINd N:"+JSON.stringify(response));
		$scope.currentNArgs =[];
		$scope.currentNArgs = response.data;
	});
	$http.get('/saru/debate/'+$routeParams.debateId+'/arguments/Y').then(function(response){
		//console.log("response for debateid and proINd Y:"+JSON.stringify(response));
		$scope.currentPArgs =[];
		$scope.currentPArgs = response.data;
	});

	$scope.addArgument = function(arg, pInd){
		
		var argument = {};
		argument.debateId = $scope.currentDebate._id;
		argument.content = {};
		argument.content.text = arg;
		argument.content.supports = [];
		argument.content.disputes = [];
		argument.content.counters = [];
		argument.content.proInd = pInd;
		argument.user={};
		argument.user.email=$rootScope.currentUser.email;
		argument.user.fullname=$rootScope.currentUser.fullname;
		argument.user.firstname = $rootScope.currentUser.firstname;
		argument.user.lastname =$rootScope.currentUser.lastname;
		argument.user.id=$rootScope.currentUser.regUser;
		argument.user.photourl = $rootScope.currentUser.photourl;
		var result = $http.post('/saru/arguments',argument).then(function(response){

			if (argument.content.proInd === 'Y') {
				if ($scope.currentPArgs == 'undefined') {
					$scope.currentPArgs = [];
				}
				$scope.currentPArgs.push(response.data);
				$scope.txtPArg="";
			} else {
				if ($scope.currentNArgs === 'undefined') {
					$scope.currentNArgs = [];
				}
				$scope.currentNArgs.push(response.data);
				$scope.txtNArg="";
			}
			socket.emit('newArg', response.data);
		});
	}

	$scope.getAvatarSrc = function(fname,lname,user) {
		if (user) {
		if (typeof user.photourl != 'undefined') {
			return user.photourl;
		} else {

			var initial = fname.slice(0, 1);
			initial += lname.slice(0, 1);
			var src = "http://placehold.it/50/55C1E7/fff&amp;text=";
			return src + initial;
		}
	}
	}


	$scope.addSupport = function(argument,index){
		var user = {};
		user.s_email = $rootScope.currentUser.email;
		user.name = $rootScope.currentUser.fullname;
		var updatedArg = {};
		var api = "";
		if(checkSupported(argument)){
			api = '/saru/arguments/'+argument._id+'/support/remove';
		}else{
			api='/saru/arguments/'+argument._id+'/support/add';
		}
		$http.put(api,user).then(function(response){
			console.log("support added/removed"+api);
			$http.get('/saru/argument/'+argument._id).then(function(response){
				updatedArg = response.data;
				console.log('updated arg'+JSON.stringify(updatedArg));
				if (argument.content.proInd === 'Y') {
					$scope.currentPArgs[index] =  updatedArg;
				}else{
					$scope.currentNArgs[index] =  updatedArg;
				}
			});
		});

		//$scope.$apply();
	}

	$scope.addDispute = function(argument,index){
		var user = {};
		user.s_email = $rootScope.currentUser.email;
		user.name = $rootScope.currentUser.fullname;
		var updatedArg = {};
		var api = "";
		if(checkDisputed(argument)){
			api = '/saru/arguments/'+argument._id+'/dispute/remove';
		}else{
			api='/saru/arguments/'+argument._id+'/dispute/add';
		}
		$http.put(api,user).then(function(response){
			console.log("dispute added/removed"+api);
			$http.get('/saru/argument/'+argument._id).then(function(response){
				updatedArg = response.data;
				console.log('updated arg'+JSON.stringify(updatedArg));
				if (argument.content.proInd === 'Y') {
					$scope.currentPArgs[index] =  updatedArg;
				}else{
					$scope.currentNArgs[index] =  updatedArg;
				}
			});
		});

	}

	$scope.counters = function(argument,index){
console.log("inside counters metod"+JSON.stringify(argument));

		$rootScope.modalArgument = argument;
		$http.post('/saru/arguments/multiple',argument.content.counters).then(function(response){
			console.log("response for counters"+JSON.stringify(response.data));
			$rootScope.counterArgs = response.data;
		});
	}
	$scope.addCounter = function(arg){
		console.log("inside counters metod"+JSON.stringify($scope.modalArgument));
		console.log("inside counters metod"+JSON.stringify(arg));
		var mArg = $rootScope.modalArgument;
		var argument = {};
		argument.debateId =mArg.debateId;
		argument.content = {};
		argument.content.text = arg;
		argument.content.supports = [];
		argument.content.disputes = [];
		argument.content.counters = [];
		if (mArg.content.proInd === 'Y') {
			argument.content.proInd = 'N';
		}else{
			argument.content.proInd = 'Y';
		}
		argument.user={};
		argument.user.email=$rootScope.currentUser.email;
		argument.user.fullname=$rootScope.currentUser.fullname;
		argument.user.firstname = $rootScope.currentUser.firstname;
		argument.user.lastname =$rootScope.currentUser.lastname;
		argument.user.id=$rootScope.currentUser.regUser;
		argument.user.photourl = $rootScope.currentUser.photourl;
		argument.parent = mArg._id;
		var result = $http.post('/saru/arguments',argument).then(function(response){

			if (argument.content.proInd === 'Y') {
				if ($scope.currentPArgs == 'undefined') {
					$scope.currentPArgs = [];
				}
				$scope.currentPArgs.push(response.data);
				$scope.txtPArg="";
			} else {
				if ($scope.currentNArgs === 'undefined') {
					$scope.currentNArgs = [];
				}
				$scope.currentNArgs.push(response.data);
				$scope.txtNArg="";
			}
			socket.emit('newArg', response.data);
			$scope.counterArg="";
			$http.put('/saru/arguments/'+mArg._id+'/counter/add/'+response.data._id).then(function(response2){
				$scope.$apply();
			});

		});

	}

}]);

myApp.controller('LoginController',
    ['$scope', 'Authentication','$location',
        function($scope, Authentication,$location) {
             console.log("LoginController");         
            $scope.login = function() {
                console.log("login method"+JSON.stringify($scope.user));
                Authentication.login($scope.user);
            };

            $scope.logout = function() {
                console.log("logout method");
                Authentication.logout();
            };

            $scope.register = function() {
                console.log("registration method");
                Authentication.register($scope.user);
            }; //register

            $scope.loginWithFB = function(){
                console.log("FB login");
                Authentication.fbLogin();
            };

            $scope.checkpass = function(a,b){
                if(a==b){
                    return false;
                }else{
                    return true;
                }
            }
        }]);

/**
 * Debate controller
 */

myApp.controller('MainController',['$http','$scope','$location',function($http, $scope,$location){
	console.log("inside main controller");
	$scope.debate={};
	$scope.submitDebate= function(){
		console.log("inside submit debate method:" + JSON.stringify($scope.debate));
		var result = $http.post('/saru/debates',$scope.debate).then(function(response){
			console.log("response object:"+JSON.stringify(response));
			$scope.currentDebate=response.data;
			$location.path('/debate/'+response.data._id);
		});
	console.log("response is"+JSON.stringify($scope.resultdebate));
	}
	$scope.addProData = function(data){
		console.log("inside addprodata");
		if(angular.isUndefined($scope.debate.content.pro_data)){
			console.log("inside if loop");
			$scope.debate.content.pro_data=[];
			$scope.debate.content.pro_data.push(data);
			$scope.proData="";
			
		}else{
			console.log("inside else loop");
			$scope.debate.content.pro_data.push(data);
			$scope.proData="";
		}
	}
	$scope.addConData = function(data){
		console.log("inside addcondata");
		if(	angular.isUndefined($scope.debate.content.con_data)){
			$scope.debate.content.con_data=[];
			$scope.debate.content.con_data.push(data);
			$scope.conData="";
		}else{
			$scope.debate.content.con_data.push(data);
			$scope.conData="";
		}
	}
	
}]);


myApp.factory('Authentication',
  ['$rootScope', '$location', '$firebaseObject', '$firebaseAuth',
  function($rootScope, $location, $firebaseObject, $firebaseAuth) {

  var ref = firebase.database().ref();
  var auth = $firebaseAuth();
  var fbprovider = new firebase.auth.FacebookAuthProvider();

  fbprovider.addScope('public_profile');
  fbprovider.addScope('email');


  
  var myObject;

  auth.$onAuthStateChanged(function(authUser) {
    var userB = firebase.auth().currentUser;


    if(authUser) {

      if(authUser.providerData[0].providerId=="facebook.com"){

        var user = {};
        user.fullname = authUser.providerData[0].displayName;
        user.email = authUser.providerData[0].email;
        user.photourl = authUser.providerData[0].photoURL;
        user.regUser = authUser.providerData[0].uid;
        user.providerID = authUser.providerData[0].providerId;
        $rootScope.currentUser=user;
        $rootScope.$apply();
      }else{
        firebase.database().ref('/users/' + authUser.uid).once('value').then(function(snapshot) {
        var user = {};
        user.fullname = snapshot.val().fullname;
        user.email = snapshot.val().email;
        user.regUser =  snapshot.val().uid;
        user.date =  snapshot.val().date;
        user.firstname =  snapshot.val().firstname;
        user.lastname =  snapshot.val().lastname;

         $rootScope.currentUser=user;
        $rootScope.$apply();
        });
        //var userRef = ref.child('users').child(authUser.uid);
        //var userObj = $firebaseObject(userRef);
       // $rootScope.currentUser = userObj;

      }
    } else {
      console.log('setting user to null');

      $rootScope.currentUser = '';
    }
  });

  myObject = {
    login: function(user) {
      auth.$signInWithEmailAndPassword(
        user.email,
        user.password
      ).then(function(user) {
        $location.path('/browseDebates');
        $rootScope.showMsgBriefly("Log in successful","alert-success");
      }).catch(function(error) {
        $rootScope.showMsgBriefly(error.message,'alert-danger');
            console.log("Login error:"+error.message);
      }); //signInWithEmailAndPassword
    }, //login

    logout: function() {
      return auth.$signOut();
      $rootScope.showMsgBriefly("Logged Out!","alert-success");
      $rootScope.$apply();
    }, //logout

    requireAuth: function() {
      return auth.$requireSignIn();
    }, //require Authentication

    register: function(user) {
      user.fullname = user.firstname+' '+user.lastname;
      console.log('register method in auth'+user.fullname);
      auth.$createUserWithEmailAndPassword(
        user.email,
        user.password
      ).then(function(regUser) {
            console.log("inside register athenservice");
        var regRef = ref.child('users')
          .child(regUser.uid).set({
            date: firebase.database.ServerValue.TIMESTAMP,
            regUser: regUser.uid,
            firstname: user.firstname,
            lastname: user.lastname,
            fullname: user.fullname,
            email: user.email
          }); //userinfo

          regUser.sendEmailVerification().then(function() {
              // Email sent.
            console.log('Email verification sent');
            $rootScope.showMsgBriefly("Verification email sent!. Please check you email inbox!","alert-success");
            }, function(error) {
              // An error happened.
            console.log('Error while sending verification email :'+error.message);
            });
         myObject.login(user);
      }).catch(function(error) {
        $rootScope.showMsgBriefly(error.message,'alert-danger');
      }); //createUserWithEmailAndPassword
    }, //register

    fbLogin: function(){
firebase.auth().signInWithPopup(fbprovider).then(function(result) {
  // This gives you a Facebook Access Token. You can use it to access the Facebook API.
  console.log("FB auth complete "+token+" "+JSON.stringify(result.user));
  var token = result.credential.accessToken;
  // The signed-in user info.
  var user = {};
  user.regUser = result.user.uid;
  user.fullname = result.user.displayName;
  user.email = result.user.email;
  user.photoURL = result.user.photoURL;
   $rootScope.currentUser = user;
   $location.path('/browseDebates');
}).catch(function(error) {
  // Handle Errors here.
  var errorCode = error.code;
  $rootScope.showMsgBriefly(error.message,'alert-danger');
  console.log("FB login error : "+error.message);
  // The email of the user's account used.
  var email = error.email;
  // The firebase.auth.AuthCredential type that was used.
  var credential = error.credential;
  // ...
});
    }
  }; //return


  return myObject;

}]); //factory
